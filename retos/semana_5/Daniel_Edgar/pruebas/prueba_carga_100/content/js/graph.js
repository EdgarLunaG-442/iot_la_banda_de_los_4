/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 8266.0, "minX": 0.0, "maxY": 64788.0, "series": [{"data": [[0.0, 8266.0], [0.1, 8266.0], [0.2, 8266.0], [0.3, 8266.0], [0.4, 8266.0], [0.5, 8266.0], [0.6, 8266.0], [0.7, 8266.0], [0.8, 8266.0], [0.9, 8266.0], [1.0, 8494.0], [1.1, 8494.0], [1.2, 8494.0], [1.3, 8494.0], [1.4, 8494.0], [1.5, 8494.0], [1.6, 8494.0], [1.7, 8494.0], [1.8, 8494.0], [1.9, 8494.0], [2.0, 9994.0], [2.1, 9994.0], [2.2, 9994.0], [2.3, 9994.0], [2.4, 9994.0], [2.5, 9994.0], [2.6, 9994.0], [2.7, 9994.0], [2.8, 9994.0], [2.9, 9994.0], [3.0, 10172.0], [3.1, 10172.0], [3.2, 10172.0], [3.3, 10172.0], [3.4, 10172.0], [3.5, 10172.0], [3.6, 10172.0], [3.7, 10172.0], [3.8, 10172.0], [3.9, 10172.0], [4.0, 10176.0], [4.1, 10176.0], [4.2, 10176.0], [4.3, 10176.0], [4.4, 10176.0], [4.5, 10176.0], [4.6, 10176.0], [4.7, 10176.0], [4.8, 10176.0], [4.9, 10176.0], [5.0, 10197.0], [5.1, 10197.0], [5.2, 10197.0], [5.3, 10197.0], [5.4, 10197.0], [5.5, 10197.0], [5.6, 10197.0], [5.7, 10197.0], [5.8, 10197.0], [5.9, 10197.0], [6.0, 11050.0], [6.1, 11050.0], [6.2, 11050.0], [6.3, 11050.0], [6.4, 11050.0], [6.5, 11050.0], [6.6, 11050.0], [6.7, 11050.0], [6.8, 11050.0], [6.9, 11050.0], [7.0, 11294.0], [7.1, 11294.0], [7.2, 11294.0], [7.3, 11294.0], [7.4, 11294.0], [7.5, 11294.0], [7.6, 11294.0], [7.7, 11294.0], [7.8, 11294.0], [7.9, 11294.0], [8.0, 11301.0], [8.1, 11301.0], [8.2, 11301.0], [8.3, 11301.0], [8.4, 11301.0], [8.5, 11301.0], [8.6, 11301.0], [8.7, 11301.0], [8.8, 11301.0], [8.9, 11301.0], [9.0, 11315.0], [9.1, 11315.0], [9.2, 11315.0], [9.3, 11315.0], [9.4, 11315.0], [9.5, 11315.0], [9.6, 11315.0], [9.7, 11315.0], [9.8, 11315.0], [9.9, 11315.0], [10.0, 11326.0], [10.1, 11326.0], [10.2, 11326.0], [10.3, 11326.0], [10.4, 11326.0], [10.5, 11326.0], [10.6, 11326.0], [10.7, 11326.0], [10.8, 11326.0], [10.9, 11326.0], [11.0, 11372.0], [11.1, 11372.0], [11.2, 11372.0], [11.3, 11372.0], [11.4, 11372.0], [11.5, 11372.0], [11.6, 11372.0], [11.7, 11372.0], [11.8, 11372.0], [11.9, 11372.0], [12.0, 11483.0], [12.1, 11483.0], [12.2, 11483.0], [12.3, 11483.0], [12.4, 11483.0], [12.5, 11483.0], [12.6, 11483.0], [12.7, 11483.0], [12.8, 11483.0], [12.9, 11483.0], [13.0, 11505.0], [13.1, 11505.0], [13.2, 11505.0], [13.3, 11505.0], [13.4, 11505.0], [13.5, 11505.0], [13.6, 11505.0], [13.7, 11505.0], [13.8, 11505.0], [13.9, 11505.0], [14.0, 11969.0], [14.1, 11969.0], [14.2, 11969.0], [14.3, 11969.0], [14.4, 11969.0], [14.5, 11969.0], [14.6, 11969.0], [14.7, 11969.0], [14.8, 11969.0], [14.9, 11969.0], [15.0, 12100.0], [15.1, 12100.0], [15.2, 12100.0], [15.3, 12100.0], [15.4, 12100.0], [15.5, 12100.0], [15.6, 12100.0], [15.7, 12100.0], [15.8, 12100.0], [15.9, 12100.0], [16.0, 12228.0], [16.1, 12228.0], [16.2, 12228.0], [16.3, 12228.0], [16.4, 12228.0], [16.5, 12228.0], [16.6, 12228.0], [16.7, 12228.0], [16.8, 12228.0], [16.9, 12228.0], [17.0, 12297.0], [17.1, 12297.0], [17.2, 12297.0], [17.3, 12297.0], [17.4, 12297.0], [17.5, 12297.0], [17.6, 12297.0], [17.7, 12297.0], [17.8, 12297.0], [17.9, 12297.0], [18.0, 12299.0], [18.1, 12299.0], [18.2, 12299.0], [18.3, 12299.0], [18.4, 12299.0], [18.5, 12299.0], [18.6, 12299.0], [18.7, 12299.0], [18.8, 12299.0], [18.9, 12299.0], [19.0, 12331.0], [19.1, 12331.0], [19.2, 12331.0], [19.3, 12331.0], [19.4, 12331.0], [19.5, 12331.0], [19.6, 12331.0], [19.7, 12331.0], [19.8, 12331.0], [19.9, 12331.0], [20.0, 12342.0], [20.1, 12342.0], [20.2, 12342.0], [20.3, 12342.0], [20.4, 12342.0], [20.5, 12342.0], [20.6, 12342.0], [20.7, 12342.0], [20.8, 12342.0], [20.9, 12342.0], [21.0, 12352.0], [21.1, 12352.0], [21.2, 12352.0], [21.3, 12352.0], [21.4, 12352.0], [21.5, 12352.0], [21.6, 12352.0], [21.7, 12352.0], [21.8, 12352.0], [21.9, 12352.0], [22.0, 12356.0], [22.1, 12356.0], [22.2, 12356.0], [22.3, 12356.0], [22.4, 12356.0], [22.5, 12356.0], [22.6, 12356.0], [22.7, 12356.0], [22.8, 12356.0], [22.9, 12356.0], [23.0, 12368.0], [23.1, 12368.0], [23.2, 12368.0], [23.3, 12368.0], [23.4, 12368.0], [23.5, 12368.0], [23.6, 12368.0], [23.7, 12368.0], [23.8, 12368.0], [23.9, 12368.0], [24.0, 12404.0], [24.1, 12404.0], [24.2, 12404.0], [24.3, 12404.0], [24.4, 12404.0], [24.5, 12404.0], [24.6, 12404.0], [24.7, 12404.0], [24.8, 12404.0], [24.9, 12404.0], [25.0, 12475.0], [25.1, 12475.0], [25.2, 12475.0], [25.3, 12475.0], [25.4, 12475.0], [25.5, 12475.0], [25.6, 12475.0], [25.7, 12475.0], [25.8, 12475.0], [25.9, 12475.0], [26.0, 12490.0], [26.1, 12490.0], [26.2, 12490.0], [26.3, 12490.0], [26.4, 12490.0], [26.5, 12490.0], [26.6, 12490.0], [26.7, 12490.0], [26.8, 12490.0], [26.9, 12490.0], [27.0, 12662.0], [27.1, 12662.0], [27.2, 12662.0], [27.3, 12662.0], [27.4, 12662.0], [27.5, 12662.0], [27.6, 12662.0], [27.7, 12662.0], [27.8, 12662.0], [27.9, 12662.0], [28.0, 12684.0], [28.1, 12684.0], [28.2, 12684.0], [28.3, 12684.0], [28.4, 12684.0], [28.5, 12684.0], [28.6, 12684.0], [28.7, 12684.0], [28.8, 12684.0], [28.9, 12684.0], [29.0, 12709.0], [29.1, 12709.0], [29.2, 12709.0], [29.3, 12709.0], [29.4, 12709.0], [29.5, 12709.0], [29.6, 12709.0], [29.7, 12709.0], [29.8, 12709.0], [29.9, 12709.0], [30.0, 12714.0], [30.1, 12714.0], [30.2, 12714.0], [30.3, 12714.0], [30.4, 12714.0], [30.5, 12714.0], [30.6, 12714.0], [30.7, 12714.0], [30.8, 12714.0], [30.9, 12714.0], [31.0, 12780.0], [31.1, 12780.0], [31.2, 12780.0], [31.3, 12780.0], [31.4, 12780.0], [31.5, 12780.0], [31.6, 12780.0], [31.7, 12780.0], [31.8, 12780.0], [31.9, 12780.0], [32.0, 12783.0], [32.1, 12783.0], [32.2, 12783.0], [32.3, 12783.0], [32.4, 12783.0], [32.5, 12783.0], [32.6, 12783.0], [32.7, 12783.0], [32.8, 12783.0], [32.9, 12783.0], [33.0, 12834.0], [33.1, 12834.0], [33.2, 12834.0], [33.3, 12834.0], [33.4, 12834.0], [33.5, 12834.0], [33.6, 12834.0], [33.7, 12834.0], [33.8, 12834.0], [33.9, 12834.0], [34.0, 12917.0], [34.1, 12917.0], [34.2, 12917.0], [34.3, 12917.0], [34.4, 12917.0], [34.5, 12917.0], [34.6, 12917.0], [34.7, 12917.0], [34.8, 12917.0], [34.9, 12917.0], [35.0, 13037.0], [35.1, 13037.0], [35.2, 13037.0], [35.3, 13037.0], [35.4, 13037.0], [35.5, 13037.0], [35.6, 13037.0], [35.7, 13037.0], [35.8, 13037.0], [35.9, 13037.0], [36.0, 13048.0], [36.1, 13048.0], [36.2, 13048.0], [36.3, 13048.0], [36.4, 13048.0], [36.5, 13048.0], [36.6, 13048.0], [36.7, 13048.0], [36.8, 13048.0], [36.9, 13048.0], [37.0, 13099.0], [37.1, 13099.0], [37.2, 13099.0], [37.3, 13099.0], [37.4, 13099.0], [37.5, 13099.0], [37.6, 13099.0], [37.7, 13099.0], [37.8, 13099.0], [37.9, 13099.0], [38.0, 13125.0], [38.1, 13125.0], [38.2, 13125.0], [38.3, 13125.0], [38.4, 13125.0], [38.5, 13125.0], [38.6, 13125.0], [38.7, 13125.0], [38.8, 13125.0], [38.9, 13125.0], [39.0, 13280.0], [39.1, 13280.0], [39.2, 13280.0], [39.3, 13280.0], [39.4, 13280.0], [39.5, 13280.0], [39.6, 13280.0], [39.7, 13280.0], [39.8, 13280.0], [39.9, 13280.0], [40.0, 13331.0], [40.1, 13331.0], [40.2, 13331.0], [40.3, 13331.0], [40.4, 13331.0], [40.5, 13331.0], [40.6, 13331.0], [40.7, 13331.0], [40.8, 13331.0], [40.9, 13331.0], [41.0, 13374.0], [41.1, 13374.0], [41.2, 13374.0], [41.3, 13374.0], [41.4, 13374.0], [41.5, 13374.0], [41.6, 13374.0], [41.7, 13374.0], [41.8, 13374.0], [41.9, 13374.0], [42.0, 13433.0], [42.1, 13433.0], [42.2, 13433.0], [42.3, 13433.0], [42.4, 13433.0], [42.5, 13433.0], [42.6, 13433.0], [42.7, 13433.0], [42.8, 13433.0], [42.9, 13433.0], [43.0, 13579.0], [43.1, 13579.0], [43.2, 13579.0], [43.3, 13579.0], [43.4, 13579.0], [43.5, 13579.0], [43.6, 13579.0], [43.7, 13579.0], [43.8, 13579.0], [43.9, 13579.0], [44.0, 13705.0], [44.1, 13705.0], [44.2, 13705.0], [44.3, 13705.0], [44.4, 13705.0], [44.5, 13705.0], [44.6, 13705.0], [44.7, 13705.0], [44.8, 13705.0], [44.9, 13705.0], [45.0, 13866.0], [45.1, 13866.0], [45.2, 13866.0], [45.3, 13866.0], [45.4, 13866.0], [45.5, 13866.0], [45.6, 13866.0], [45.7, 13866.0], [45.8, 13866.0], [45.9, 13866.0], [46.0, 13882.0], [46.1, 13882.0], [46.2, 13882.0], [46.3, 13882.0], [46.4, 13882.0], [46.5, 13882.0], [46.6, 13882.0], [46.7, 13882.0], [46.8, 13882.0], [46.9, 13882.0], [47.0, 13991.0], [47.1, 13991.0], [47.2, 13991.0], [47.3, 13991.0], [47.4, 13991.0], [47.5, 13991.0], [47.6, 13991.0], [47.7, 13991.0], [47.8, 13991.0], [47.9, 13991.0], [48.0, 14127.0], [48.1, 14127.0], [48.2, 14127.0], [48.3, 14127.0], [48.4, 14127.0], [48.5, 14127.0], [48.6, 14127.0], [48.7, 14127.0], [48.8, 14127.0], [48.9, 14127.0], [49.0, 14185.0], [49.1, 14185.0], [49.2, 14185.0], [49.3, 14185.0], [49.4, 14185.0], [49.5, 14185.0], [49.6, 14185.0], [49.7, 14185.0], [49.8, 14185.0], [49.9, 14185.0], [50.0, 14279.0], [50.1, 14279.0], [50.2, 14279.0], [50.3, 14279.0], [50.4, 14279.0], [50.5, 14279.0], [50.6, 14279.0], [50.7, 14279.0], [50.8, 14279.0], [50.9, 14279.0], [51.0, 14556.0], [51.1, 14556.0], [51.2, 14556.0], [51.3, 14556.0], [51.4, 14556.0], [51.5, 14556.0], [51.6, 14556.0], [51.7, 14556.0], [51.8, 14556.0], [51.9, 14556.0], [52.0, 14701.0], [52.1, 14701.0], [52.2, 14701.0], [52.3, 14701.0], [52.4, 14701.0], [52.5, 14701.0], [52.6, 14701.0], [52.7, 14701.0], [52.8, 14701.0], [52.9, 14701.0], [53.0, 15070.0], [53.1, 15070.0], [53.2, 15070.0], [53.3, 15070.0], [53.4, 15070.0], [53.5, 15070.0], [53.6, 15070.0], [53.7, 15070.0], [53.8, 15070.0], [53.9, 15070.0], [54.0, 15086.0], [54.1, 15086.0], [54.2, 15086.0], [54.3, 15086.0], [54.4, 15086.0], [54.5, 15086.0], [54.6, 15086.0], [54.7, 15086.0], [54.8, 15086.0], [54.9, 15086.0], [55.0, 15087.0], [55.1, 15087.0], [55.2, 15087.0], [55.3, 15087.0], [55.4, 15087.0], [55.5, 15087.0], [55.6, 15087.0], [55.7, 15087.0], [55.8, 15087.0], [55.9, 15087.0], [56.0, 15242.0], [56.1, 15242.0], [56.2, 15242.0], [56.3, 15242.0], [56.4, 15242.0], [56.5, 15242.0], [56.6, 15242.0], [56.7, 15242.0], [56.8, 15242.0], [56.9, 15242.0], [57.0, 15263.0], [57.1, 15263.0], [57.2, 15263.0], [57.3, 15263.0], [57.4, 15263.0], [57.5, 15263.0], [57.6, 15263.0], [57.7, 15263.0], [57.8, 15263.0], [57.9, 15263.0], [58.0, 15263.0], [58.1, 15263.0], [58.2, 15263.0], [58.3, 15263.0], [58.4, 15263.0], [58.5, 15263.0], [58.6, 15263.0], [58.7, 15263.0], [58.8, 15263.0], [58.9, 15263.0], [59.0, 15296.0], [59.1, 15296.0], [59.2, 15296.0], [59.3, 15296.0], [59.4, 15296.0], [59.5, 15296.0], [59.6, 15296.0], [59.7, 15296.0], [59.8, 15296.0], [59.9, 15296.0], [60.0, 15577.0], [60.1, 15577.0], [60.2, 15577.0], [60.3, 15577.0], [60.4, 15577.0], [60.5, 15577.0], [60.6, 15577.0], [60.7, 15577.0], [60.8, 15577.0], [60.9, 15577.0], [61.0, 15665.0], [61.1, 15665.0], [61.2, 15665.0], [61.3, 15665.0], [61.4, 15665.0], [61.5, 15665.0], [61.6, 15665.0], [61.7, 15665.0], [61.8, 15665.0], [61.9, 15665.0], [62.0, 15679.0], [62.1, 15679.0], [62.2, 15679.0], [62.3, 15679.0], [62.4, 15679.0], [62.5, 15679.0], [62.6, 15679.0], [62.7, 15679.0], [62.8, 15679.0], [62.9, 15679.0], [63.0, 15746.0], [63.1, 15746.0], [63.2, 15746.0], [63.3, 15746.0], [63.4, 15746.0], [63.5, 15746.0], [63.6, 15746.0], [63.7, 15746.0], [63.8, 15746.0], [63.9, 15746.0], [64.0, 15776.0], [64.1, 15776.0], [64.2, 15776.0], [64.3, 15776.0], [64.4, 15776.0], [64.5, 15776.0], [64.6, 15776.0], [64.7, 15776.0], [64.8, 15776.0], [64.9, 15776.0], [65.0, 15821.0], [65.1, 15821.0], [65.2, 15821.0], [65.3, 15821.0], [65.4, 15821.0], [65.5, 15821.0], [65.6, 15821.0], [65.7, 15821.0], [65.8, 15821.0], [65.9, 15821.0], [66.0, 15922.0], [66.1, 15922.0], [66.2, 15922.0], [66.3, 15922.0], [66.4, 15922.0], [66.5, 15922.0], [66.6, 15922.0], [66.7, 15922.0], [66.8, 15922.0], [66.9, 15922.0], [67.0, 16086.0], [67.1, 16086.0], [67.2, 16086.0], [67.3, 16086.0], [67.4, 16086.0], [67.5, 16086.0], [67.6, 16086.0], [67.7, 16086.0], [67.8, 16086.0], [67.9, 16086.0], [68.0, 16196.0], [68.1, 16196.0], [68.2, 16196.0], [68.3, 16196.0], [68.4, 16196.0], [68.5, 16196.0], [68.6, 16196.0], [68.7, 16196.0], [68.8, 16196.0], [68.9, 16196.0], [69.0, 16212.0], [69.1, 16212.0], [69.2, 16212.0], [69.3, 16212.0], [69.4, 16212.0], [69.5, 16212.0], [69.6, 16212.0], [69.7, 16212.0], [69.8, 16212.0], [69.9, 16212.0], [70.0, 16231.0], [70.1, 16231.0], [70.2, 16231.0], [70.3, 16231.0], [70.4, 16231.0], [70.5, 16231.0], [70.6, 16231.0], [70.7, 16231.0], [70.8, 16231.0], [70.9, 16231.0], [71.0, 16414.0], [71.1, 16414.0], [71.2, 16414.0], [71.3, 16414.0], [71.4, 16414.0], [71.5, 16414.0], [71.6, 16414.0], [71.7, 16414.0], [71.8, 16414.0], [71.9, 16414.0], [72.0, 16460.0], [72.1, 16460.0], [72.2, 16460.0], [72.3, 16460.0], [72.4, 16460.0], [72.5, 16460.0], [72.6, 16460.0], [72.7, 16460.0], [72.8, 16460.0], [72.9, 16460.0], [73.0, 16513.0], [73.1, 16513.0], [73.2, 16513.0], [73.3, 16513.0], [73.4, 16513.0], [73.5, 16513.0], [73.6, 16513.0], [73.7, 16513.0], [73.8, 16513.0], [73.9, 16513.0], [74.0, 16713.0], [74.1, 16713.0], [74.2, 16713.0], [74.3, 16713.0], [74.4, 16713.0], [74.5, 16713.0], [74.6, 16713.0], [74.7, 16713.0], [74.8, 16713.0], [74.9, 16713.0], [75.0, 16754.0], [75.1, 16754.0], [75.2, 16754.0], [75.3, 16754.0], [75.4, 16754.0], [75.5, 16754.0], [75.6, 16754.0], [75.7, 16754.0], [75.8, 16754.0], [75.9, 16754.0], [76.0, 16785.0], [76.1, 16785.0], [76.2, 16785.0], [76.3, 16785.0], [76.4, 16785.0], [76.5, 16785.0], [76.6, 16785.0], [76.7, 16785.0], [76.8, 16785.0], [76.9, 16785.0], [77.0, 16945.0], [77.1, 16945.0], [77.2, 16945.0], [77.3, 16945.0], [77.4, 16945.0], [77.5, 16945.0], [77.6, 16945.0], [77.7, 16945.0], [77.8, 16945.0], [77.9, 16945.0], [78.0, 16946.0], [78.1, 16946.0], [78.2, 16946.0], [78.3, 16946.0], [78.4, 16946.0], [78.5, 16946.0], [78.6, 16946.0], [78.7, 16946.0], [78.8, 16946.0], [78.9, 16946.0], [79.0, 17006.0], [79.1, 17006.0], [79.2, 17006.0], [79.3, 17006.0], [79.4, 17006.0], [79.5, 17006.0], [79.6, 17006.0], [79.7, 17006.0], [79.8, 17006.0], [79.9, 17006.0], [80.0, 17204.0], [80.1, 17204.0], [80.2, 17204.0], [80.3, 17204.0], [80.4, 17204.0], [80.5, 17204.0], [80.6, 17204.0], [80.7, 17204.0], [80.8, 17204.0], [80.9, 17204.0], [81.0, 17270.0], [81.1, 17270.0], [81.2, 17270.0], [81.3, 17270.0], [81.4, 17270.0], [81.5, 17270.0], [81.6, 17270.0], [81.7, 17270.0], [81.8, 17270.0], [81.9, 17270.0], [82.0, 17274.0], [82.1, 17274.0], [82.2, 17274.0], [82.3, 17274.0], [82.4, 17274.0], [82.5, 17274.0], [82.6, 17274.0], [82.7, 17274.0], [82.8, 17274.0], [82.9, 17274.0], [83.0, 17324.0], [83.1, 17324.0], [83.2, 17324.0], [83.3, 17324.0], [83.4, 17324.0], [83.5, 17324.0], [83.6, 17324.0], [83.7, 17324.0], [83.8, 17324.0], [83.9, 17324.0], [84.0, 17326.0], [84.1, 17326.0], [84.2, 17326.0], [84.3, 17326.0], [84.4, 17326.0], [84.5, 17326.0], [84.6, 17326.0], [84.7, 17326.0], [84.8, 17326.0], [84.9, 17326.0], [85.0, 17335.0], [85.1, 17335.0], [85.2, 17335.0], [85.3, 17335.0], [85.4, 17335.0], [85.5, 17335.0], [85.6, 17335.0], [85.7, 17335.0], [85.8, 17335.0], [85.9, 17335.0], [86.0, 17378.0], [86.1, 17378.0], [86.2, 17378.0], [86.3, 17378.0], [86.4, 17378.0], [86.5, 17378.0], [86.6, 17378.0], [86.7, 17378.0], [86.8, 17378.0], [86.9, 17378.0], [87.0, 17382.0], [87.1, 17382.0], [87.2, 17382.0], [87.3, 17382.0], [87.4, 17382.0], [87.5, 17382.0], [87.6, 17382.0], [87.7, 17382.0], [87.8, 17382.0], [87.9, 17382.0], [88.0, 17411.0], [88.1, 17411.0], [88.2, 17411.0], [88.3, 17411.0], [88.4, 17411.0], [88.5, 17411.0], [88.6, 17411.0], [88.7, 17411.0], [88.8, 17411.0], [88.9, 17411.0], [89.0, 17420.0], [89.1, 17420.0], [89.2, 17420.0], [89.3, 17420.0], [89.4, 17420.0], [89.5, 17420.0], [89.6, 17420.0], [89.7, 17420.0], [89.8, 17420.0], [89.9, 17420.0], [90.0, 17421.0], [90.1, 17421.0], [90.2, 17421.0], [90.3, 17421.0], [90.4, 17421.0], [90.5, 17421.0], [90.6, 17421.0], [90.7, 17421.0], [90.8, 17421.0], [90.9, 17421.0], [91.0, 17430.0], [91.1, 17430.0], [91.2, 17430.0], [91.3, 17430.0], [91.4, 17430.0], [91.5, 17430.0], [91.6, 17430.0], [91.7, 17430.0], [91.8, 17430.0], [91.9, 17430.0], [92.0, 17447.0], [92.1, 17447.0], [92.2, 17447.0], [92.3, 17447.0], [92.4, 17447.0], [92.5, 17447.0], [92.6, 17447.0], [92.7, 17447.0], [92.8, 17447.0], [92.9, 17447.0], [93.0, 17484.0], [93.1, 17484.0], [93.2, 17484.0], [93.3, 17484.0], [93.4, 17484.0], [93.5, 17484.0], [93.6, 17484.0], [93.7, 17484.0], [93.8, 17484.0], [93.9, 17484.0], [94.0, 17499.0], [94.1, 17499.0], [94.2, 17499.0], [94.3, 17499.0], [94.4, 17499.0], [94.5, 17499.0], [94.6, 17499.0], [94.7, 17499.0], [94.8, 17499.0], [94.9, 17499.0], [95.0, 17512.0], [95.1, 17512.0], [95.2, 17512.0], [95.3, 17512.0], [95.4, 17512.0], [95.5, 17512.0], [95.6, 17512.0], [95.7, 17512.0], [95.8, 17512.0], [95.9, 17512.0], [96.0, 17542.0], [96.1, 17542.0], [96.2, 17542.0], [96.3, 17542.0], [96.4, 17542.0], [96.5, 17542.0], [96.6, 17542.0], [96.7, 17542.0], [96.8, 17542.0], [96.9, 17542.0], [97.0, 17689.0], [97.1, 17689.0], [97.2, 17689.0], [97.3, 17689.0], [97.4, 17689.0], [97.5, 17689.0], [97.6, 17689.0], [97.7, 17689.0], [97.8, 17689.0], [97.9, 17689.0], [98.0, 17692.0], [98.1, 17692.0], [98.2, 17692.0], [98.3, 17692.0], [98.4, 17692.0], [98.5, 17692.0], [98.6, 17692.0], [98.7, 17692.0], [98.8, 17692.0], [98.9, 17692.0], [99.0, 17849.0], [99.1, 17849.0], [99.2, 17849.0], [99.3, 17849.0], [99.4, 17849.0], [99.5, 17849.0], [99.6, 17849.0], [99.7, 17849.0], [99.8, 17849.0], [99.9, 17849.0]], "isOverall": false, "label": "Petición a timescale", "isController": false}, {"data": [[0.0, 12749.0], [0.1, 12749.0], [0.2, 12749.0], [0.3, 12749.0], [0.4, 12749.0], [0.5, 12749.0], [0.6, 12749.0], [0.7, 12749.0], [0.8, 12749.0], [0.9, 12749.0], [1.0, 12881.0], [1.1, 12881.0], [1.2, 12881.0], [1.3, 12881.0], [1.4, 12881.0], [1.5, 12881.0], [1.6, 12881.0], [1.7, 12881.0], [1.8, 12881.0], [1.9, 12881.0], [2.0, 12886.0], [2.1, 12886.0], [2.2, 12886.0], [2.3, 12886.0], [2.4, 12886.0], [2.5, 12886.0], [2.6, 12886.0], [2.7, 12886.0], [2.8, 12886.0], [2.9, 12886.0], [3.0, 12923.0], [3.1, 12923.0], [3.2, 12923.0], [3.3, 12923.0], [3.4, 12923.0], [3.5, 12923.0], [3.6, 12923.0], [3.7, 12923.0], [3.8, 12923.0], [3.9, 12923.0], [4.0, 13077.0], [4.1, 13077.0], [4.2, 13077.0], [4.3, 13077.0], [4.4, 13077.0], [4.5, 13077.0], [4.6, 13077.0], [4.7, 13077.0], [4.8, 13077.0], [4.9, 13077.0], [5.0, 13154.0], [5.1, 13154.0], [5.2, 13154.0], [5.3, 13154.0], [5.4, 13154.0], [5.5, 13154.0], [5.6, 13154.0], [5.7, 13154.0], [5.8, 13154.0], [5.9, 13154.0], [6.0, 56398.0], [6.1, 56398.0], [6.2, 56398.0], [6.3, 56398.0], [6.4, 56398.0], [6.5, 56398.0], [6.6, 56398.0], [6.7, 56398.0], [6.8, 56398.0], [6.9, 56398.0], [7.0, 58278.0], [7.1, 58278.0], [7.2, 58278.0], [7.3, 58278.0], [7.4, 58278.0], [7.5, 58278.0], [7.6, 58278.0], [7.7, 58278.0], [7.8, 58278.0], [7.9, 58278.0], [8.0, 59785.0], [8.1, 59785.0], [8.2, 59785.0], [8.3, 59785.0], [8.4, 59785.0], [8.5, 59785.0], [8.6, 59785.0], [8.7, 59785.0], [8.8, 59785.0], [8.9, 59785.0], [9.0, 60402.0], [9.1, 60402.0], [9.2, 60402.0], [9.3, 60402.0], [9.4, 60402.0], [9.5, 60402.0], [9.6, 60402.0], [9.7, 60402.0], [9.8, 60402.0], [9.9, 60402.0], [10.0, 60594.0], [10.1, 60594.0], [10.2, 60594.0], [10.3, 60594.0], [10.4, 60594.0], [10.5, 60594.0], [10.6, 60594.0], [10.7, 60594.0], [10.8, 60594.0], [10.9, 60594.0], [11.0, 60746.0], [11.1, 60746.0], [11.2, 60746.0], [11.3, 60746.0], [11.4, 60746.0], [11.5, 60746.0], [11.6, 60746.0], [11.7, 60746.0], [11.8, 60746.0], [11.9, 60746.0], [12.0, 60846.0], [12.1, 60846.0], [12.2, 60846.0], [12.3, 60846.0], [12.4, 60846.0], [12.5, 60846.0], [12.6, 60846.0], [12.7, 60846.0], [12.8, 60846.0], [12.9, 60846.0], [13.0, 61120.0], [13.1, 61120.0], [13.2, 61120.0], [13.3, 61120.0], [13.4, 61120.0], [13.5, 61120.0], [13.6, 61120.0], [13.7, 61120.0], [13.8, 61120.0], [13.9, 61120.0], [14.0, 61423.0], [14.1, 61423.0], [14.2, 61423.0], [14.3, 61423.0], [14.4, 61423.0], [14.5, 61423.0], [14.6, 61423.0], [14.7, 61423.0], [14.8, 61423.0], [14.9, 61423.0], [15.0, 61423.0], [15.1, 61423.0], [15.2, 61423.0], [15.3, 61423.0], [15.4, 61423.0], [15.5, 61423.0], [15.6, 61423.0], [15.7, 61423.0], [15.8, 61423.0], [15.9, 61423.0], [16.0, 61430.0], [16.1, 61430.0], [16.2, 61430.0], [16.3, 61430.0], [16.4, 61430.0], [16.5, 61430.0], [16.6, 61430.0], [16.7, 61430.0], [16.8, 61430.0], [16.9, 61430.0], [17.0, 61461.0], [17.1, 61461.0], [17.2, 61461.0], [17.3, 61461.0], [17.4, 61461.0], [17.5, 61461.0], [17.6, 61461.0], [17.7, 61461.0], [17.8, 61461.0], [17.9, 61461.0], [18.0, 61553.0], [18.1, 61553.0], [18.2, 61553.0], [18.3, 61553.0], [18.4, 61553.0], [18.5, 61553.0], [18.6, 61553.0], [18.7, 61553.0], [18.8, 61553.0], [18.9, 61553.0], [19.0, 61743.0], [19.1, 61743.0], [19.2, 61743.0], [19.3, 61743.0], [19.4, 61743.0], [19.5, 61743.0], [19.6, 61743.0], [19.7, 61743.0], [19.8, 61743.0], [19.9, 61743.0], [20.0, 61755.0], [20.1, 61755.0], [20.2, 61755.0], [20.3, 61755.0], [20.4, 61755.0], [20.5, 61755.0], [20.6, 61755.0], [20.7, 61755.0], [20.8, 61755.0], [20.9, 61755.0], [21.0, 61804.0], [21.1, 61804.0], [21.2, 61804.0], [21.3, 61804.0], [21.4, 61804.0], [21.5, 61804.0], [21.6, 61804.0], [21.7, 61804.0], [21.8, 61804.0], [21.9, 61804.0], [22.0, 61898.0], [22.1, 61898.0], [22.2, 61898.0], [22.3, 61898.0], [22.4, 61898.0], [22.5, 61898.0], [22.6, 61898.0], [22.7, 61898.0], [22.8, 61898.0], [22.9, 61898.0], [23.0, 61940.0], [23.1, 61940.0], [23.2, 61940.0], [23.3, 61940.0], [23.4, 61940.0], [23.5, 61940.0], [23.6, 61940.0], [23.7, 61940.0], [23.8, 61940.0], [23.9, 61940.0], [24.0, 61948.0], [24.1, 61948.0], [24.2, 61948.0], [24.3, 61948.0], [24.4, 61948.0], [24.5, 61948.0], [24.6, 61948.0], [24.7, 61948.0], [24.8, 61948.0], [24.9, 61948.0], [25.0, 62046.0], [25.1, 62046.0], [25.2, 62046.0], [25.3, 62046.0], [25.4, 62046.0], [25.5, 62046.0], [25.6, 62046.0], [25.7, 62046.0], [25.8, 62046.0], [25.9, 62046.0], [26.0, 62083.0], [26.1, 62083.0], [26.2, 62083.0], [26.3, 62083.0], [26.4, 62083.0], [26.5, 62083.0], [26.6, 62083.0], [26.7, 62083.0], [26.8, 62083.0], [26.9, 62083.0], [27.0, 62114.0], [27.1, 62114.0], [27.2, 62114.0], [27.3, 62114.0], [27.4, 62114.0], [27.5, 62114.0], [27.6, 62114.0], [27.7, 62114.0], [27.8, 62114.0], [27.9, 62114.0], [28.0, 62308.0], [28.1, 62308.0], [28.2, 62308.0], [28.3, 62308.0], [28.4, 62308.0], [28.5, 62308.0], [28.6, 62308.0], [28.7, 62308.0], [28.8, 62308.0], [28.9, 62308.0], [29.0, 62559.0], [29.1, 62559.0], [29.2, 62559.0], [29.3, 62559.0], [29.4, 62559.0], [29.5, 62559.0], [29.6, 62559.0], [29.7, 62559.0], [29.8, 62559.0], [29.9, 62559.0], [30.0, 62606.0], [30.1, 62606.0], [30.2, 62606.0], [30.3, 62606.0], [30.4, 62606.0], [30.5, 62606.0], [30.6, 62606.0], [30.7, 62606.0], [30.8, 62606.0], [30.9, 62606.0], [31.0, 62697.0], [31.1, 62697.0], [31.2, 62697.0], [31.3, 62697.0], [31.4, 62697.0], [31.5, 62697.0], [31.6, 62697.0], [31.7, 62697.0], [31.8, 62697.0], [31.9, 62697.0], [32.0, 62782.0], [32.1, 62782.0], [32.2, 62782.0], [32.3, 62782.0], [32.4, 62782.0], [32.5, 62782.0], [32.6, 62782.0], [32.7, 62782.0], [32.8, 62782.0], [32.9, 62782.0], [33.0, 62791.0], [33.1, 62791.0], [33.2, 62791.0], [33.3, 62791.0], [33.4, 62791.0], [33.5, 62791.0], [33.6, 62791.0], [33.7, 62791.0], [33.8, 62791.0], [33.9, 62791.0], [34.0, 62849.0], [34.1, 62849.0], [34.2, 62849.0], [34.3, 62849.0], [34.4, 62849.0], [34.5, 62849.0], [34.6, 62849.0], [34.7, 62849.0], [34.8, 62849.0], [34.9, 62849.0], [35.0, 62875.0], [35.1, 62875.0], [35.2, 62875.0], [35.3, 62875.0], [35.4, 62875.0], [35.5, 62875.0], [35.6, 62875.0], [35.7, 62875.0], [35.8, 62875.0], [35.9, 62875.0], [36.0, 62886.0], [36.1, 62886.0], [36.2, 62886.0], [36.3, 62886.0], [36.4, 62886.0], [36.5, 62886.0], [36.6, 62886.0], [36.7, 62886.0], [36.8, 62886.0], [36.9, 62886.0], [37.0, 62889.0], [37.1, 62889.0], [37.2, 62889.0], [37.3, 62889.0], [37.4, 62889.0], [37.5, 62889.0], [37.6, 62889.0], [37.7, 62889.0], [37.8, 62889.0], [37.9, 62889.0], [38.0, 62896.0], [38.1, 62896.0], [38.2, 62896.0], [38.3, 62896.0], [38.4, 62896.0], [38.5, 62896.0], [38.6, 62896.0], [38.7, 62896.0], [38.8, 62896.0], [38.9, 62896.0], [39.0, 62928.0], [39.1, 62928.0], [39.2, 62928.0], [39.3, 62928.0], [39.4, 62928.0], [39.5, 62928.0], [39.6, 62928.0], [39.7, 62928.0], [39.8, 62928.0], [39.9, 62928.0], [40.0, 62948.0], [40.1, 62948.0], [40.2, 62948.0], [40.3, 62948.0], [40.4, 62948.0], [40.5, 62948.0], [40.6, 62948.0], [40.7, 62948.0], [40.8, 62948.0], [40.9, 62948.0], [41.0, 62985.0], [41.1, 62985.0], [41.2, 62985.0], [41.3, 62985.0], [41.4, 62985.0], [41.5, 62985.0], [41.6, 62985.0], [41.7, 62985.0], [41.8, 62985.0], [41.9, 62985.0], [42.0, 63164.0], [42.1, 63164.0], [42.2, 63164.0], [42.3, 63164.0], [42.4, 63164.0], [42.5, 63164.0], [42.6, 63164.0], [42.7, 63164.0], [42.8, 63164.0], [42.9, 63164.0], [43.0, 63186.0], [43.1, 63186.0], [43.2, 63186.0], [43.3, 63186.0], [43.4, 63186.0], [43.5, 63186.0], [43.6, 63186.0], [43.7, 63186.0], [43.8, 63186.0], [43.9, 63186.0], [44.0, 63206.0], [44.1, 63206.0], [44.2, 63206.0], [44.3, 63206.0], [44.4, 63206.0], [44.5, 63206.0], [44.6, 63206.0], [44.7, 63206.0], [44.8, 63206.0], [44.9, 63206.0], [45.0, 63212.0], [45.1, 63212.0], [45.2, 63212.0], [45.3, 63212.0], [45.4, 63212.0], [45.5, 63212.0], [45.6, 63212.0], [45.7, 63212.0], [45.8, 63212.0], [45.9, 63212.0], [46.0, 63237.0], [46.1, 63237.0], [46.2, 63237.0], [46.3, 63237.0], [46.4, 63237.0], [46.5, 63237.0], [46.6, 63237.0], [46.7, 63237.0], [46.8, 63237.0], [46.9, 63237.0], [47.0, 63241.0], [47.1, 63241.0], [47.2, 63241.0], [47.3, 63241.0], [47.4, 63241.0], [47.5, 63241.0], [47.6, 63241.0], [47.7, 63241.0], [47.8, 63241.0], [47.9, 63241.0], [48.0, 63348.0], [48.1, 63348.0], [48.2, 63348.0], [48.3, 63348.0], [48.4, 63348.0], [48.5, 63348.0], [48.6, 63348.0], [48.7, 63348.0], [48.8, 63348.0], [48.9, 63348.0], [49.0, 63438.0], [49.1, 63438.0], [49.2, 63438.0], [49.3, 63438.0], [49.4, 63438.0], [49.5, 63438.0], [49.6, 63438.0], [49.7, 63438.0], [49.8, 63438.0], [49.9, 63438.0], [50.0, 63461.0], [50.1, 63461.0], [50.2, 63461.0], [50.3, 63461.0], [50.4, 63461.0], [50.5, 63461.0], [50.6, 63461.0], [50.7, 63461.0], [50.8, 63461.0], [50.9, 63461.0], [51.0, 63505.0], [51.1, 63505.0], [51.2, 63505.0], [51.3, 63505.0], [51.4, 63505.0], [51.5, 63505.0], [51.6, 63505.0], [51.7, 63505.0], [51.8, 63505.0], [51.9, 63505.0], [52.0, 63587.0], [52.1, 63587.0], [52.2, 63587.0], [52.3, 63587.0], [52.4, 63587.0], [52.5, 63587.0], [52.6, 63587.0], [52.7, 63587.0], [52.8, 63587.0], [52.9, 63587.0], [53.0, 63613.0], [53.1, 63613.0], [53.2, 63613.0], [53.3, 63613.0], [53.4, 63613.0], [53.5, 63613.0], [53.6, 63613.0], [53.7, 63613.0], [53.8, 63613.0], [53.9, 63613.0], [54.0, 63630.0], [54.1, 63630.0], [54.2, 63630.0], [54.3, 63630.0], [54.4, 63630.0], [54.5, 63630.0], [54.6, 63630.0], [54.7, 63630.0], [54.8, 63630.0], [54.9, 63630.0], [55.0, 63719.0], [55.1, 63719.0], [55.2, 63719.0], [55.3, 63719.0], [55.4, 63719.0], [55.5, 63719.0], [55.6, 63719.0], [55.7, 63719.0], [55.8, 63719.0], [55.9, 63719.0], [56.0, 63820.0], [56.1, 63820.0], [56.2, 63820.0], [56.3, 63820.0], [56.4, 63820.0], [56.5, 63820.0], [56.6, 63820.0], [56.7, 63820.0], [56.8, 63820.0], [56.9, 63820.0], [57.0, 63872.0], [57.1, 63872.0], [57.2, 63872.0], [57.3, 63872.0], [57.4, 63872.0], [57.5, 63872.0], [57.6, 63872.0], [57.7, 63872.0], [57.8, 63872.0], [57.9, 63872.0], [58.0, 63906.0], [58.1, 63906.0], [58.2, 63906.0], [58.3, 63906.0], [58.4, 63906.0], [58.5, 63906.0], [58.6, 63906.0], [58.7, 63906.0], [58.8, 63906.0], [58.9, 63906.0], [59.0, 63928.0], [59.1, 63928.0], [59.2, 63928.0], [59.3, 63928.0], [59.4, 63928.0], [59.5, 63928.0], [59.6, 63928.0], [59.7, 63928.0], [59.8, 63928.0], [59.9, 63928.0], [60.0, 63949.0], [60.1, 63949.0], [60.2, 63949.0], [60.3, 63949.0], [60.4, 63949.0], [60.5, 63949.0], [60.6, 63949.0], [60.7, 63949.0], [60.8, 63949.0], [60.9, 63949.0], [61.0, 64015.0], [61.1, 64015.0], [61.2, 64015.0], [61.3, 64015.0], [61.4, 64015.0], [61.5, 64015.0], [61.6, 64015.0], [61.7, 64015.0], [61.8, 64015.0], [61.9, 64015.0], [62.0, 64027.0], [62.1, 64027.0], [62.2, 64027.0], [62.3, 64027.0], [62.4, 64027.0], [62.5, 64027.0], [62.6, 64027.0], [62.7, 64027.0], [62.8, 64027.0], [62.9, 64027.0], [63.0, 64065.0], [63.1, 64065.0], [63.2, 64065.0], [63.3, 64065.0], [63.4, 64065.0], [63.5, 64065.0], [63.6, 64065.0], [63.7, 64065.0], [63.8, 64065.0], [63.9, 64065.0], [64.0, 64081.0], [64.1, 64081.0], [64.2, 64081.0], [64.3, 64081.0], [64.4, 64081.0], [64.5, 64081.0], [64.6, 64081.0], [64.7, 64081.0], [64.8, 64081.0], [64.9, 64081.0], [65.0, 64130.0], [65.1, 64130.0], [65.2, 64130.0], [65.3, 64130.0], [65.4, 64130.0], [65.5, 64130.0], [65.6, 64130.0], [65.7, 64130.0], [65.8, 64130.0], [65.9, 64130.0], [66.0, 64171.0], [66.1, 64171.0], [66.2, 64171.0], [66.3, 64171.0], [66.4, 64171.0], [66.5, 64171.0], [66.6, 64171.0], [66.7, 64171.0], [66.8, 64171.0], [66.9, 64171.0], [67.0, 64215.0], [67.1, 64215.0], [67.2, 64215.0], [67.3, 64215.0], [67.4, 64215.0], [67.5, 64215.0], [67.6, 64215.0], [67.7, 64215.0], [67.8, 64215.0], [67.9, 64215.0], [68.0, 64221.0], [68.1, 64221.0], [68.2, 64221.0], [68.3, 64221.0], [68.4, 64221.0], [68.5, 64221.0], [68.6, 64221.0], [68.7, 64221.0], [68.8, 64221.0], [68.9, 64221.0], [69.0, 64299.0], [69.1, 64299.0], [69.2, 64299.0], [69.3, 64299.0], [69.4, 64299.0], [69.5, 64299.0], [69.6, 64299.0], [69.7, 64299.0], [69.8, 64299.0], [69.9, 64299.0], [70.0, 64380.0], [70.1, 64380.0], [70.2, 64380.0], [70.3, 64380.0], [70.4, 64380.0], [70.5, 64380.0], [70.6, 64380.0], [70.7, 64380.0], [70.8, 64380.0], [70.9, 64380.0], [71.0, 64390.0], [71.1, 64390.0], [71.2, 64390.0], [71.3, 64390.0], [71.4, 64390.0], [71.5, 64390.0], [71.6, 64390.0], [71.7, 64390.0], [71.8, 64390.0], [71.9, 64390.0], [72.0, 64407.0], [72.1, 64407.0], [72.2, 64407.0], [72.3, 64407.0], [72.4, 64407.0], [72.5, 64407.0], [72.6, 64407.0], [72.7, 64407.0], [72.8, 64407.0], [72.9, 64407.0], [73.0, 64416.0], [73.1, 64416.0], [73.2, 64416.0], [73.3, 64416.0], [73.4, 64416.0], [73.5, 64416.0], [73.6, 64416.0], [73.7, 64416.0], [73.8, 64416.0], [73.9, 64416.0], [74.0, 64421.0], [74.1, 64421.0], [74.2, 64421.0], [74.3, 64421.0], [74.4, 64421.0], [74.5, 64421.0], [74.6, 64421.0], [74.7, 64421.0], [74.8, 64421.0], [74.9, 64421.0], [75.0, 64422.0], [75.1, 64422.0], [75.2, 64422.0], [75.3, 64422.0], [75.4, 64422.0], [75.5, 64422.0], [75.6, 64422.0], [75.7, 64422.0], [75.8, 64422.0], [75.9, 64422.0], [76.0, 64447.0], [76.1, 64447.0], [76.2, 64447.0], [76.3, 64447.0], [76.4, 64447.0], [76.5, 64447.0], [76.6, 64447.0], [76.7, 64447.0], [76.8, 64447.0], [76.9, 64447.0], [77.0, 64470.0], [77.1, 64470.0], [77.2, 64470.0], [77.3, 64470.0], [77.4, 64470.0], [77.5, 64470.0], [77.6, 64470.0], [77.7, 64470.0], [77.8, 64470.0], [77.9, 64470.0], [78.0, 64476.0], [78.1, 64476.0], [78.2, 64476.0], [78.3, 64476.0], [78.4, 64476.0], [78.5, 64476.0], [78.6, 64476.0], [78.7, 64476.0], [78.8, 64476.0], [78.9, 64476.0], [79.0, 64484.0], [79.1, 64484.0], [79.2, 64484.0], [79.3, 64484.0], [79.4, 64484.0], [79.5, 64484.0], [79.6, 64484.0], [79.7, 64484.0], [79.8, 64484.0], [79.9, 64484.0], [80.0, 64487.0], [80.1, 64487.0], [80.2, 64487.0], [80.3, 64487.0], [80.4, 64487.0], [80.5, 64487.0], [80.6, 64487.0], [80.7, 64487.0], [80.8, 64487.0], [80.9, 64487.0], [81.0, 64496.0], [81.1, 64496.0], [81.2, 64496.0], [81.3, 64496.0], [81.4, 64496.0], [81.5, 64496.0], [81.6, 64496.0], [81.7, 64496.0], [81.8, 64496.0], [81.9, 64496.0], [82.0, 64514.0], [82.1, 64514.0], [82.2, 64514.0], [82.3, 64514.0], [82.4, 64514.0], [82.5, 64514.0], [82.6, 64514.0], [82.7, 64514.0], [82.8, 64514.0], [82.9, 64514.0], [83.0, 64519.0], [83.1, 64519.0], [83.2, 64519.0], [83.3, 64519.0], [83.4, 64519.0], [83.5, 64519.0], [83.6, 64519.0], [83.7, 64519.0], [83.8, 64519.0], [83.9, 64519.0], [84.0, 64534.0], [84.1, 64534.0], [84.2, 64534.0], [84.3, 64534.0], [84.4, 64534.0], [84.5, 64534.0], [84.6, 64534.0], [84.7, 64534.0], [84.8, 64534.0], [84.9, 64534.0], [85.0, 64538.0], [85.1, 64538.0], [85.2, 64538.0], [85.3, 64538.0], [85.4, 64538.0], [85.5, 64538.0], [85.6, 64538.0], [85.7, 64538.0], [85.8, 64538.0], [85.9, 64538.0], [86.0, 64579.0], [86.1, 64579.0], [86.2, 64579.0], [86.3, 64579.0], [86.4, 64579.0], [86.5, 64579.0], [86.6, 64579.0], [86.7, 64579.0], [86.8, 64579.0], [86.9, 64579.0], [87.0, 64593.0], [87.1, 64593.0], [87.2, 64593.0], [87.3, 64593.0], [87.4, 64593.0], [87.5, 64593.0], [87.6, 64593.0], [87.7, 64593.0], [87.8, 64593.0], [87.9, 64593.0], [88.0, 64597.0], [88.1, 64597.0], [88.2, 64597.0], [88.3, 64597.0], [88.4, 64597.0], [88.5, 64597.0], [88.6, 64597.0], [88.7, 64597.0], [88.8, 64597.0], [88.9, 64597.0], [89.0, 64600.0], [89.1, 64600.0], [89.2, 64600.0], [89.3, 64600.0], [89.4, 64600.0], [89.5, 64600.0], [89.6, 64600.0], [89.7, 64600.0], [89.8, 64600.0], [89.9, 64600.0], [90.0, 64615.0], [90.1, 64615.0], [90.2, 64615.0], [90.3, 64615.0], [90.4, 64615.0], [90.5, 64615.0], [90.6, 64615.0], [90.7, 64615.0], [90.8, 64615.0], [90.9, 64615.0], [91.0, 64616.0], [91.1, 64616.0], [91.2, 64616.0], [91.3, 64616.0], [91.4, 64616.0], [91.5, 64616.0], [91.6, 64616.0], [91.7, 64616.0], [91.8, 64616.0], [91.9, 64616.0], [92.0, 64632.0], [92.1, 64632.0], [92.2, 64632.0], [92.3, 64632.0], [92.4, 64632.0], [92.5, 64632.0], [92.6, 64632.0], [92.7, 64632.0], [92.8, 64632.0], [92.9, 64632.0], [93.0, 64639.0], [93.1, 64639.0], [93.2, 64639.0], [93.3, 64639.0], [93.4, 64639.0], [93.5, 64639.0], [93.6, 64639.0], [93.7, 64639.0], [93.8, 64639.0], [93.9, 64639.0], [94.0, 64679.0], [94.1, 64679.0], [94.2, 64679.0], [94.3, 64679.0], [94.4, 64679.0], [94.5, 64679.0], [94.6, 64679.0], [94.7, 64679.0], [94.8, 64679.0], [94.9, 64679.0], [95.0, 64681.0], [95.1, 64681.0], [95.2, 64681.0], [95.3, 64681.0], [95.4, 64681.0], [95.5, 64681.0], [95.6, 64681.0], [95.7, 64681.0], [95.8, 64681.0], [95.9, 64681.0], [96.0, 64701.0], [96.1, 64701.0], [96.2, 64701.0], [96.3, 64701.0], [96.4, 64701.0], [96.5, 64701.0], [96.6, 64701.0], [96.7, 64701.0], [96.8, 64701.0], [96.9, 64701.0], [97.0, 64719.0], [97.1, 64719.0], [97.2, 64719.0], [97.3, 64719.0], [97.4, 64719.0], [97.5, 64719.0], [97.6, 64719.0], [97.7, 64719.0], [97.8, 64719.0], [97.9, 64719.0], [98.0, 64753.0], [98.1, 64753.0], [98.2, 64753.0], [98.3, 64753.0], [98.4, 64753.0], [98.5, 64753.0], [98.6, 64753.0], [98.7, 64753.0], [98.8, 64753.0], [98.9, 64753.0], [99.0, 64788.0], [99.1, 64788.0], [99.2, 64788.0], [99.3, 64788.0], [99.4, 64788.0], [99.5, 64788.0], [99.6, 64788.0], [99.7, 64788.0], [99.8, 64788.0], [99.9, 64788.0]], "isOverall": false, "label": "Petición a postgres", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 8200.0, "maxY": 10.0, "series": [{"data": [[8200.0, 1.0], [8400.0, 1.0], [9900.0, 1.0], [10100.0, 3.0], [11000.0, 1.0], [11200.0, 1.0], [11300.0, 4.0], [11400.0, 1.0], [11500.0, 1.0], [11900.0, 1.0], [12100.0, 1.0], [12200.0, 3.0], [12300.0, 5.0], [12400.0, 3.0], [12600.0, 2.0], [12700.0, 4.0], [12800.0, 1.0], [12900.0, 1.0], [13000.0, 3.0], [13100.0, 1.0], [13300.0, 2.0], [13200.0, 1.0], [13400.0, 1.0], [13500.0, 1.0], [13700.0, 1.0], [13800.0, 2.0], [14100.0, 2.0], [13900.0, 1.0], [14200.0, 1.0], [14500.0, 1.0], [14700.0, 1.0], [15000.0, 3.0], [15200.0, 4.0], [15500.0, 1.0], [15600.0, 2.0], [15700.0, 2.0], [15800.0, 1.0], [16000.0, 1.0], [16100.0, 1.0], [15900.0, 1.0], [16200.0, 2.0], [16400.0, 2.0], [16900.0, 2.0], [17300.0, 5.0], [16500.0, 1.0], [16700.0, 3.0], [17200.0, 3.0], [17000.0, 1.0], [17400.0, 7.0], [17600.0, 2.0], [17500.0, 2.0], [17800.0, 1.0]], "isOverall": false, "label": "Petición a timescale", "isController": false}, {"data": [[12700.0, 1.0], [12800.0, 2.0], [12900.0, 1.0], [13000.0, 1.0], [13100.0, 1.0], [56300.0, 1.0], [58200.0, 1.0], [59700.0, 1.0], [60400.0, 1.0], [60500.0, 1.0], [60700.0, 1.0], [60800.0, 1.0], [61100.0, 1.0], [61400.0, 4.0], [61700.0, 2.0], [61500.0, 1.0], [61800.0, 2.0], [61900.0, 2.0], [62000.0, 2.0], [62100.0, 1.0], [62300.0, 1.0], [62600.0, 2.0], [62500.0, 1.0], [63200.0, 4.0], [63100.0, 2.0], [63400.0, 2.0], [63300.0, 1.0], [62800.0, 5.0], [62900.0, 3.0], [62700.0, 2.0], [63600.0, 2.0], [63500.0, 2.0], [63900.0, 3.0], [64600.0, 7.0], [64700.0, 4.0], [64000.0, 4.0], [64100.0, 2.0], [64200.0, 3.0], [63700.0, 1.0], [63800.0, 2.0], [64500.0, 7.0], [64300.0, 2.0], [64400.0, 10.0]], "isOverall": false, "label": "Petición a postgres", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 64700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 6.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 194.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 194.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 6.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 47.56382978723404, "minX": 1.662936E12, "maxY": 97.5, "series": [{"data": [[1.662936E12, 97.5], [1.66293606E12, 47.56382978723404]], "isOverall": false, "label": "Postgres", "isController": false}, {"data": [[1.66293606E12, 50.58000000000004]], "isOverall": false, "label": "Timescale", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66293606E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 8266.0, "minX": 1.0, "maxY": 64788.0, "series": [{"data": [[2.0, 17447.0], [4.0, 17416.0], [6.0, 17594.0], [7.0, 17484.0], [8.0, 17430.0], [9.0, 17326.0], [10.0, 17542.0], [11.0, 17512.0], [13.0, 17537.0], [14.0, 17274.0], [15.0, 17204.0], [16.0, 17420.0], [17.0, 17378.0], [18.0, 17335.0], [19.0, 16945.0], [20.0, 17006.0], [21.0, 17270.0], [22.0, 16785.0], [23.0, 16713.0], [24.0, 16754.0], [25.0, 16513.0], [26.0, 17324.0], [27.0, 16946.0], [28.0, 16414.0], [29.0, 16212.0], [30.0, 16231.0], [31.0, 16460.0], [33.0, 15776.0], [32.0, 15922.0], [35.0, 16086.0], [34.0, 16196.0], [37.0, 15746.0], [36.0, 15821.0], [39.0, 15665.0], [38.0, 15679.0], [41.0, 15087.0], [40.0, 15577.0], [43.0, 15263.0], [42.0, 15086.0], [45.0, 15263.0], [44.0, 15296.0], [47.0, 15070.0], [46.0, 15242.0], [49.0, 14556.0], [48.0, 14701.0], [51.0, 13991.0], [50.0, 14279.0], [53.0, 14185.0], [52.0, 14127.0], [55.0, 13866.0], [54.0, 13882.0], [57.0, 13579.0], [56.0, 13705.0], [59.0, 13433.0], [58.0, 13331.0], [61.0, 13374.0], [60.0, 13280.0], [63.0, 13099.0], [62.0, 13125.0], [67.0, 12834.0], [66.0, 12917.0], [65.0, 13037.0], [64.0, 13048.0], [71.0, 12699.0], [69.0, 12709.0], [68.0, 12783.0], [75.0, 12490.0], [74.0, 12475.0], [73.0, 12721.0], [79.0, 12356.0], [78.0, 12404.0], [77.0, 12349.5], [83.0, 12297.0], [82.0, 12352.0], [81.0, 12320.5], [87.0, 11505.0], [86.0, 11969.0], [85.0, 12100.0], [84.0, 12228.0], [91.0, 11297.5], [89.0, 11372.0], [88.0, 11483.0], [95.0, 10197.0], [94.0, 11050.0], [93.0, 11315.0], [92.0, 11326.0], [99.0, 8494.0], [98.0, 9994.0], [97.0, 10176.0], [96.0, 10172.0], [100.0, 8266.0], [1.0, 17849.0]], "isOverall": false, "label": "Petición a timescale", "isController": false}, {"data": [[50.58000000000004, 14372.799999999997]], "isOverall": false, "label": "Petición a timescale-Aggregated", "isController": false}, {"data": [[2.0, 64407.0], [4.0, 64516.0], [5.0, 64422.0], [6.0, 64538.0], [7.0, 64514.0], [8.0, 64597.0], [10.0, 64589.5], [12.0, 64501.5], [13.0, 64753.0], [14.0, 64788.0], [15.0, 64487.0], [16.0, 64421.0], [17.0, 64390.0], [18.0, 64221.0], [20.0, 64563.0], [21.0, 64496.0], [22.0, 64719.0], [23.0, 64476.0], [24.0, 64593.0], [25.0, 64171.0], [27.0, 64551.0], [28.0, 64701.0], [29.0, 64130.0], [30.0, 64639.0], [31.0, 64681.0], [33.0, 64534.0], [32.0, 64380.0], [35.0, 63872.0], [34.0, 63949.0], [37.0, 63820.0], [36.0, 64299.0], [39.0, 63630.0], [38.0, 63719.0], [41.0, 64015.0], [40.0, 64215.0], [43.0, 63928.0], [42.0, 64027.0], [45.0, 64065.0], [44.0, 64081.0], [47.0, 63348.0], [46.0, 63906.0], [49.0, 63186.0], [48.0, 63505.0], [51.0, 63587.0], [50.0, 63206.0], [52.0, 63461.0], [55.0, 62948.0], [54.0, 63412.5], [57.0, 63438.0], [56.0, 63164.0], [59.0, 62985.0], [58.0, 62791.0], [61.0, 62875.0], [60.0, 63241.0], [63.0, 63237.0], [62.0, 62886.0], [67.0, 62928.0], [66.0, 62889.0], [65.0, 62896.0], [64.0, 62559.0], [71.0, 62606.0], [70.0, 62697.0], [69.0, 62849.0], [68.0, 62782.0], [75.0, 62083.0], [74.0, 62046.0], [73.0, 62114.0], [72.0, 62308.0], [79.0, 61804.0], [78.0, 61898.0], [77.0, 61948.0], [76.0, 61940.0], [83.0, 61461.0], [82.0, 61553.0], [81.0, 61755.0], [80.0, 61743.0], [87.0, 61120.0], [86.0, 61430.0], [85.0, 61423.0], [84.0, 61423.0], [91.0, 60402.0], [90.0, 60594.0], [89.0, 60746.0], [88.0, 60846.0], [95.0, 13154.0], [94.0, 56398.0], [93.0, 58278.0], [92.0, 59785.0], [99.0, 12886.0], [98.0, 12923.0], [97.0, 13077.0], [96.0, 12881.0], [100.0, 12749.0], [1.0, 64615.0]], "isOverall": false, "label": "Petición a postgres", "isController": false}, {"data": [[50.559999999999995, 60202.980000000025]], "isOverall": false, "label": "Petición a postgres-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 16.2, "minX": 1.662936E12, "maxY": 16878.9, "series": [{"data": [[1.662936E12, 16878.9], [1.66293606E12, 14503.2]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.662936E12, 16.2], [1.66293606E12, 533.8]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66293606E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 12945.0, "minX": 1.662936E12, "maxY": 63219.44680851064, "series": [{"data": [[1.66293606E12, 14372.799999999997]], "isOverall": false, "label": "Petición a timescale", "isController": false}, {"data": [[1.662936E12, 12945.0], [1.66293606E12, 63219.44680851064]], "isOverall": false, "label": "Petición a postgres", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66293606E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 12603.666666666666, "minX": 1.662936E12, "maxY": 63114.712765957425, "series": [{"data": [[1.66293606E12, 14268.76]], "isOverall": false, "label": "Petición a timescale", "isController": false}, {"data": [[1.662936E12, 12603.666666666666], [1.66293606E12, 63114.712765957425]], "isOverall": false, "label": "Petición a postgres", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66293606E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 753.7399999999998, "minX": 1.662936E12, "maxY": 5109.5, "series": [{"data": [[1.66293606E12, 753.7399999999998]], "isOverall": false, "label": "Petición a timescale", "isController": false}, {"data": [[1.662936E12, 5109.5], [1.66293606E12, 1195.063829787234]], "isOverall": false, "label": "Petición a postgres", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66293606E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 8266.0, "minX": 1.66293606E12, "maxY": 64788.0, "series": [{"data": [[1.66293606E12, 64788.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66293606E12, 64491.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66293606E12, 64754.75]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66293606E12, 64615.25]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66293606E12, 8266.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66293606E12, 17615.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66293606E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 8380.0, "minX": 1.0, "maxY": 64299.0, "series": [{"data": [[2.0, 8380.0], [8.0, 11320.5], [35.0, 64299.0], [9.0, 62606.0], [10.0, 15761.0], [11.0, 38359.5], [12.0, 16733.5], [13.0, 38448.5], [14.0, 12875.5], [1.0, 58278.0], [4.0, 10174.0], [18.0, 63175.0], [19.0, 17421.0], [5.0, 60746.0], [7.0, 13705.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[6.0, 12904.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 35.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 8280.0, "minX": 1.0, "maxY": 64200.0, "series": [{"data": [[2.0, 8280.0], [8.0, 11241.5], [35.0, 64200.0], [9.0, 62508.0], [10.0, 15652.0], [11.0, 38253.5], [12.0, 16627.0], [13.0, 38342.0], [14.0, 12771.5], [1.0, 58176.0], [4.0, 10067.0], [18.0, 63071.0], [19.0, 17319.0], [5.0, 60646.0], [7.0, 13602.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[6.0, 12561.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 35.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.6666666666666667, "minX": 1.662936E12, "maxY": 1.6666666666666667, "series": [{"data": [[1.662936E12, 1.6666666666666667], [1.66293606E12, 1.6666666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66293606E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.662936E12, "maxY": 3.2333333333333334, "series": [{"data": [[1.66293606E12, 3.2333333333333334]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.662936E12, 0.1]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66293606E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.662936E12, "maxY": 1.6666666666666667, "series": [{"data": [[1.66293606E12, 1.5666666666666667]], "isOverall": false, "label": "Petición a postgres-success", "isController": false}, {"data": [[1.66293606E12, 1.6666666666666667]], "isOverall": false, "label": "Petición a timescale-success", "isController": false}, {"data": [[1.662936E12, 0.1]], "isOverall": false, "label": "Petición a postgres-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66293606E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.662936E12, "maxY": 3.2333333333333334, "series": [{"data": [[1.66293606E12, 3.2333333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.662936E12, 0.1]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66293606E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

